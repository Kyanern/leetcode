//below: 2021 07 19 S1 TIME LIMIT EXCEEDED

class Solution {
public:

    int* pIncidentArray;


    int getNumUniquePairs(int n) {
        int sum = 0;
        while (n > 0) {
            sum += n;
            n--;
        }
        return sum;
    }

    void pIncidentArray_init(int n) {
        pIncidentArray = new int[n * n];
        for (int i = 0; i < n * n; i++) {
            pIncidentArray[i] = 0;
        }
    }

    //usage: caller gives actual numbers of uv-pair, function will convert to array coords
    int pIncidentArray_get(int n, int u, int v) {
        u--;
        v--;
        return *(pIncidentArray + u * n + v);
    }

    //usage: caller gives actual numbers of uv-pair, function will convert to array coords
    void pIncidentArray_set(int n, int u, int v, int val) {
        u--;
        v--;
        *(pIncidentArray + u * n + v) = val;
    }

    //usage: caller gives actual numbers of uv-pair, function will convert to array coords
    void pIncidentArray_increment(int n, int u, int v) {
        u--;
        v--;
        *(pIncidentArray + u * n + v) += 1;
    }

    void pIncidentArray_destroy() {
        delete pIncidentArray;
    }

    vector<int> countPairs(int n, vector<vector<int>>& edges, vector<int>& queries) {
        pIncidentArray_init(n);

        //first build the Incident counts array
        for (int u = 1; u < n; u++)
        {
            for (int v = u + 1; v <= n; v++)
            {
                for (auto& pair : edges)
                {
                    if (u == pair[0] || u == pair[1] ||
                        v == pair[0] || v == pair[1])
                    {
                        pIncidentArray_increment(n, u, v);
                    }
                }
            }
        }

        //create output vector and init all to 0
        vector<int> output(queries.size(),0);

        //gather up output per query
        for (int u = 1; u < n; u++)
        {
            for (int v = u + 1; v <= n; v++)
            {
                for (int i = 0; i < queries.size(); i++)
                {
                    if (pIncidentArray_get(n, u, v) > queries[i])
                    {
                        output[i]++;
                    }
                }
            }
        }

        pIncidentArray_destroy();

        return output;
    }
};